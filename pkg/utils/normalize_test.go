package utils_test

import (
	"encoding/hex"
	"testing"

	"github.com/scalarorg/bitcoin-vault/go-utils/btc"
	"github.com/scalarorg/bitcoin-vault/go-utils/chain"
	"github.com/scalarorg/bitcoin-vault/go-utils/types"
	"github.com/scalarorg/relayers/pkg/utils"
	"github.com/stretchr/testify/require"
)

func TestCalculateDestinationAddress(t *testing.T) {
	pubkey, _ := hex.DecodeString("00147c4917362e25568858bb812751107946a3c769b6")
	addr, err := btc.ScriptPubKeyToAddress(pubkey, "testnet4")
	require.NoError(t, err)
	t.Logf("address %s", addr)
	payload, _ := hex.DecodeString
	//payload, _ = hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000128500000000000000000000000000000000000000000000000000000000000000C000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000050030C7284B1653F17CF67E6B6D0A787A34AC51151A7611F4F9F3663CAD8638914400000000000000000000000000000000000000000000000000000000000000147C4917362E25568858BB812751107946A3C769B6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000A0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001A0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002A000000000000000000000000000000000000000000000000000000000000000423078373337376362613333366366663665306433393437383732323436633939666438303935303533663138646162323961613763366330363233643137633035320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307833323465346437323638623062363562613666643731333539623634363061383261396661653137616637343334623438616436333265323033313536623735000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004230783764326233326537666438326436633831393662303161323166616266353765353431666637636234623966353062323738353964386337363639623566616100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000423078653439393237666532313066626237333961626266333539343538356534376361346362623830323165656363363732616535303961336434366562396639340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042307831326530626662393962306138643530626138313461383464623234653935333530393331316331343139636166646464383631326566633839393462346336000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000003E800000000000000000000000000000000000000000000000000000000000003E80000000000000000000000000000000000000000000000000000000000000458000000000000000000000000000000000000000000000000000000000000053300000000000000000000000000000000000000000000000000000000000003E8")
	b := chain.ChainInfo{
		ChainType: types.ChainTypeBitcoin,
		ChainID:   1,
	}

	destinationAddress, err := utils.CalculateDestinationAddress(payload, (*chain.ChainInfoBytes)(b.Bytes()))
	if err != nil {
		t.Fatalf("failed to calculate destination address: %v", err)
	}

	t.Logf("destination address: %v", destinationAddress)
}
