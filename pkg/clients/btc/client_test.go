package btc_test

import (
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"os"
	"strings"
	"testing"

	utils "github.com/scalarorg/go-common/types"
	"github.com/scalarorg/relayers/config"
	"github.com/scalarorg/relayers/pkg/clients/btc"
	"github.com/scalarorg/relayers/pkg/db"
	"github.com/scalarorg/relayers/pkg/events"
	"github.com/scalarorg/relayers/pkg/types"
	covTypes "github.com/scalarorg/scalar-core/x/covenant/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	TAPROOT_ADDRESS string = "tb1p07q440mdl4uyywns325dk8pvjphwety3psp4zvkngtjf3z3hhr2sfar3hv"
	btcClient       *btc.BtcClient
	globalConfig    *config.Config
	btcConfig       *btc.BtcNetworkConfig
	dbAdapter       *db.DatabaseAdapter
	eventBus        *events.EventBus
	rawTx           string = ""
)

var pubkeys = []string{
	"0215da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488",
	"02f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5",
	"03594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811",
	"03b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102",
	"03e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff",
}

func TestMain(m *testing.M) {
	globalConfig = &config.Config{}
	btcConfig = &btc.BtcNetworkConfig{
		Name:       "test",
		Host:       "testnet4.btc.scalar.org",
		Port:       80,
		User:       "scalar",
		Password:   "scalartestnet4",
		SSL:        nil,
		MempoolUrl: "https://mempool.space/testnet4/api",
		Address:    &TAPROOT_ADDRESS,
	}
	btcClient, _ = btc.NewBtcClientFromConfig(
		globalConfig,
		btcConfig,
		dbAdapter,
		eventBus,
		nil,
	)
	os.Exit(m.Run())
}

// CGO_LDFLAGS="-L./lib -lbitcoin_vault_ffi" CGO_CFLAGS="-I./lib" go test -timeout 10m -run ^TestGetTxOutUtxo$ github.com/scalarorg/relayers/pkg/clients/btc -v -count=1
// curl --user scalar --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "gettxout", "params": ["1c1fe66b53c9994a27436a67afbe68fd5e0445aedc7cc01d787a4bb911486dbd", 0]}' -H 'content-type: text/plain;' http://testnet4.btc.scalar.org/
func TestGetTxOutUtxo(t *testing.T) {
	utxos, err := btcClient.GetListOfUTXOs("tb1q2rwweg2c48y8966qt4fzj0f4zyg9wty7tykzwg")
	fmt.Println("%w", err)
	assert.NoError(t, err)
	assert.NotEmpty(t, utxos)
	for _, utxo := range utxos {
		fmt.Println(utxo.Txid, utxo.Vout, utxo.Value)
		txOut, err := btcClient.GetTxOut(utxo.Txid, utxo.Vout)
		fmt.Printf("txOut: %+v, err: %v\n", txOut, err)
		require.NoError(t, err)
		require.NotNil(t, txOut)
	}

	payload
	payloadBytes, err := hex.DecodeString(payload)
	require.NoError(t, err)
	params := covTypes.RedeemTokenPayloadWithType{}
	err = params.AbiUnpack(payloadBytes)
	require.NoError(t, err)
	t.Logf("params: %+v", params)
	txHash := params.Utxos[0].TxID.Hex()
	vout := params.Utxos[0].Vout
	t.Logf("params.TokenId: %s, vout: %d", txHash, vout)
	txOut, err := btcClient.GetTxOut(strings.TrimPrefix(txHash, "0x"), vout)
	fmt.Printf("txOut: %+v, err: %v\n", txOut, err)
	assert.Error(t, err)
	assert.Nil(t, txOut)
}

// CGO_LDFLAGS="-L./lib -lbitcoin_vault_ffi" CGO_CFLAGS="-I./lib" go test -timeout 10m -run ^TestGetUtxtSnapshot$ github.com/scalarorg/relayers/pkg/clients/btc -v -count=1
func TestGetUtxtSnapshot(t *testing.T) {
	taprootAddress := "tb1p4r79pkrlzmvf9dx56zraykwq4dqhuyrtq39jjxnh9rf2uy6rmelspm6j23"
	utxos, err := btcClient.GetListOfUTXOs(taprootAddress)
	assert.NoError(t, err)
	assert.NotEmpty(t, utxos)
	utxos = btc.SortUTXOsByBlockHeight(utxos)
	for _, utxo := range utxos {
		fmt.Println(utxo.Status.BlockHeight, utxo.Txid, utxo.Vout, utxo.Value)
	}
	fmt.Println("--------------------------------")
	utxos, err = btcClient.GetListOfUTXOs(taprootAddress)
	assert.NoError(t, err)
	assert.NotEmpty(t, utxos)
	utxos = btc.SortUTXOsByBlockHeight(utxos)
	for _, utxo := range utxos {
		fmt.Println(utxo.Status.BlockHeight, utxo.Txid, utxo.Vout, utxo.Value)
	}
}

// CGO_LDFLAGS="-L./lib -lbitcoin_vault_ffi" CGO_CFLAGS="-I./lib" go test -timeout 10m -run ^TestGetAddressTxsUtxo$ github.com/scalarorg/relayers/pkg/clients/btc -v -count=1
func TestGetAddressTxsUtxo(t *testing.T) {
	utxos, err := btcClient.GetAddressTxsUtxo(TAPROOT_ADDRESS, 200000)
	assert.NoError(t, err)
	assert.NotEmpty(t, utxos)
}

func TestMempoolRawTx(t *testing.T) {
	tx, err := btcClient.TestMempoolRawTx(rawTx)
	assert.NoError(t, err)
	assert.NotEmpty(t, tx)
}

// CGO_LDFLAGS="-L./lib -lbitcoin_vault_ffi" CGO_CFLAGS="-I./lib" go test -timeout 10m -run ^TestCreatePsbts$ github.com/scalarorg/relayers/pkg/clients/btc -v -count=1
func TestCreatePsbts(t *testing.T) {
	covScript, _ := hex.DecodeString("51207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5")

	custodianPubKeys := []utils.PublicKey{}

	for _, pubkey := range pubkeys {
		p, _ := hex.DecodeString(pubkey)
		custodianPubKeys = append(custodianPubKeys, utils.PublicKey(p))
	}

	psbtParams := types.PsbtParams{
		ScalarTag:       []byte("SC4L4R"),
		Version:         0,
		ProtocolTag:     []byte("tPepe"),
		NetworkKind:     utils.NetworkKind(1), //testnet
		NetworkType:     "testnet4",
		CustodianPubKey: custodianPubKeys,
		CustodianQuorum: 3,
		CustodianScript: covScript,
	}

	lockingScript, _ := hex.DecodeString("001450dceca158a9c872eb405d52293d351110572c9e")

	outpoints := []types.CommandOutPoint{
		{
			BTCFeeOpts: 0,
			RBF:        false,
			OutPoint:   utils.UnlockingOutput{Amount: 10_000, LockingScript: lockingScript},
		},
	}

	psbts, err := btcClient.CreatePsbts(psbtParams, outpoints)
	for _, psbt := range psbts {
		fmt.Printf("psbt: %x\n\n\n", psbt)
		psbtStr := base64.StdEncoding.EncodeToString(psbt)
		fmt.Printf("base64: %s\n", psbtStr)
	}
	assert.NoError(t, err)
	assert.NotEmpty(t, psbts)
}
